// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  firstname     String
  lastname      String
  email         String       @unique
  password      String
  emailVerified Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Course        Course[]
  Assessment    Assessment[]
  Plan          Plan[]

  @@map("users")
}

model Course {
  id         Int          @id @default(autoincrement())
  title      String
  fileName   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  userId     Int
  user       User         @relation(fields: [userId], references: [id])
  Question   Question[]
  Assessment Assessment[]

  @@map("courses")
}

model Question {
  id              Int      @id @default(autoincrement())
  question        String
  options         String[]
  answer          Int
  topic           String
  difficultyLevel Int      @default(1)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  courseId        Int
  course          Course   @relation(fields: [courseId], references: [id])
  Answer          Answer[]

  @@map("questions")
}

model Assessment {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  courseId    Int
  course      Course   @relation(fields: [courseId], references: [id])
  score       Float
  total       Int
  strengths   String[] @default([])
  weaknesses  String[] @default([])
  suggestions String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  answers     Answer[]

  @@map("assessments")
}

model Answer {
  id           Int        @id @default(autoincrement())
  assessmentId Int
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  questionId   Int
  question     Question   @relation(fields: [questionId], references: [id])
  chosenAnswer Int
  isCorrect    Boolean
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("answers")
}

model Plan {
  id           Int      @id @default(autoincrement())
  userId       Int
  startDate    DateTime
  endDate      DateTime
  goals        String[]
  assessmentId Int
  weeklyHours  Int
  plan         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@map("plans")
}
